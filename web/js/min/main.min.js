App.collections.FacebookSearch = Backbone.Collection.extend({
	model	 : Backbone.Model,
	center	 : null,
	token	 : null,
	distance : 1000,
	query	 : null,
	type	 : 'place',
	search	 : function(q, options){
		var nearme = this.center ? '&center=' + this.center + '&distance=' + this.distance : '';
		this.url = 'https://graph.facebook.com/search?type=' + this.type + '&q=' + (this.query = q) + nearme + '&access_token=' + this.token;
		return this.fetch(options);
	},
	parse: function(response) {
		return response.data;
	}
});

App.collections.FacebookSearch = Backbone.Collection.extend({
	model	 : Backbone.Model,
	center	 : null,
	distance : 1000,
	query	 : null,
	type	 : 'post',
	search	 : function(q, options){
		var nearme = this.center ? '&center=' + this.center + '&distance=' + this.distance : '';
		this.url = 'https://graph.facebook.com/search?type=' + this.type + '&q=' + (this.query = q) + nearme;
		return this.fetch(options);
	},
	parse: function(response) {
		return response.data;
	}
});
App.views.FacebookItem = Backbone.View.extend({	
	// constructor
	initialize: function(model){
		this.model = model;
		this.el = _.template($('#tpl-facebook-item').html(), model.attributes);
		return this;
	},
	events : {
		"click" 	 : function(){ App.evpool.trigger('showpoi', this.model); },
		"mouseover"  : function(){ App.evpool.trigger('overpoi', this.model); },
		"mouseout"   : function(){ App.evpool.trigger('outpoi', this.model); }
	}
});
App.views.FormSearch = Backbone.View.extend({
	// status constants
	STATUS_SEARCH : 'searching',
	STATUS_LOADED : 'loaded',
	STATUS_OK	  : 'success',
	STATUS_ERROR  :'error',
	
	// constructor
	initialize: function(token){
		_.bindAll(this);
		this.collection =  new App.collections.FacebookSearch();
		this.collection.on('add', this.add);
		this.collection.on('reset', this.reset);
		this.collection.token = token;
		return this.render();
	},
	render: function(){
		this.$el = $('#form');
		this.$el.removeClass().addClass(this.STATUS_LOADED);
		return this;
	},
	events: {
		"click #search" : "search",
		"keyup #q"		: "keyup",
		"change #q"		: "keyup",
		"click #reset" 	: function(e){ this.collection.reset();}
	},
	
	// actions
	reset: function(e){
		this.$el.removeClass().addClass(this.STATUS_LOADED);		
		$('#result').html('').hide();
	},
	keyup: function(e){
		this.$('#search').attr('disabled',this.$('#q').val().length > 2 ? null : 'disabled');
		if('keyCode' in e && e.keyCode == 13) this.search();
	},
	search: function(e){
		this.$el.removeClass().addClass(this.STATUS_SEARCH);
		var query = this.$('#q').val();
		this.$('#query').text(query);
		return this.collection.search(query,this);
	},
	success: function(e){
		this.$el.removeClass().addClass(this.STATUS_OK);
		$('#result').show();
	},
	error: function(e){
		this.$el.removeClass().addClass(this.STATUS_ERROR);
	},
	add: function(model){
		track = model;
		$('#result').append(new App.views.FacebookItem(model).el);
	}
});

App.views.Map = Backbone.View.extend({
	initialize : function(collection){
		// init
		_.bindAll(this);		
		this.$el = $('#map-view');
		this.collection = collection;
		// events
		this.collection.on('add', this.addPoi,  this);
		this.collection.on('reset', this.reset);
		App.evpool.on('showpoi', this.showpoi);
		App.evpool.on('overpoi', this.overpoi);
		App.evpool.on('outpoi',  this.outpoi);
		// render
		this.render();
	},
	render: function(){ // Render Map
		this.mqa = new MQA.TileMap( this.$el.children('#map').get(0), 1 /* zoon */, {lat:25, lng:5}, 'map');
		MQA.withModule('largezoom', $.proxy(function() {
			this.addControl( new MQA.LargeZoom(), new MQA.MapCornerPlacement(MQA.MapCorner.TOP_RIGHT, new MQA.Size(5,5)));
		}, this.mqa));
		MQA.withModule('mousewheel', $.proxy(function() { this.enableMouseWheelZoom(); }, this.mqa));		
	},
	onLocation: function(geo){ 
		this.latitude  = geo.coords.latitude;
		this.longitude = geo.coords.longitude;
		this.geo 	  = true;
	},
	offLocation: function(geo){
		this.latitude = this.longitude = this.geo = false;
	},	
	// Poi actions
	showPoi: function(model){
		this.mqa.setCenter({lat:model.get('latitude'),lng:model.get('longitude')});
		if(this.mqa.zoon > 8) this.mqa.setZoomLevel(8);
		trackme = model;
		MQA.EventManager.trigger(model.get('poi'),'click');
	},
	overPoi: function(model){ // check if is a sidebar or map rollover
		if(! 'get' in model) model = model.srcObject.model;
		model.get('poi').setIcon(model.get('poi').icoover);
	},
	outPoi: function(model){ // check if is a sidebar or map rollout
		if(! 'get' in model) model = model.srcObject.model;
		model.get('poi').setIcon(model.get('poi').icoout);
	},
	addPoi: function(model){
		var poi   = new MQA.Poi({lat:model.get('location').latitude, lng:model.get('location').longitude});
		poi.model = model;
		poi.icoover = new MQA.Icon("/images/map/poi-red.png",20,28);
		poi.icoout  = new MQA.Icon("/images/map/poi-blue.png",20,28);
		poi.setRolloverContent(model.get('name'));
		poi.setInfoContentHTML('<div style="width:135px; height:170px;"><img src=""/>'+model.get('name')+'</div>');
		poi.setIcon(poi.icoout);
		model.set('poi', poi);
		this.mqa.addShape(poi);
	}
});
