/**
 *
 *  AJAX Error Handler, version 0.1
 *  Built at 2012/12/19 10:28 GMT
 *	By Adriano Spadoni
 *
 *
 *	Tips:
 *	
 *	- It's disabled by default.
 *	For enable it you just need add:
 *	$.ajax({
 *		url : "/api/x",
 *		data : data,
 * 		retry : 3 <- try 3 times before give up
 *	});
 *
 *	- to abort before call again:
 *	if(xhr && xhr.readystate != 4) xhr.abort();
 *	
 *	- before any redirect call, use:
 *	$.xhrPool.abortAll() 
 *	
 *	- to display the number of tries use:
 *	if(xhr.statusText != 'abort'){
 *		if(this.retried + 1 < this.retry){
 *			msg = "retrying... " + (this.retried + 1) + ' of ' + this.retry;
 *		} else {
 *			msg = "retried " + this.retry + ' times.';
 *		}
 *	}
 *
 **/

// Ajax Pool
$.xhrPool = [];
$.xhrPool.abortAll = function() {
    $(this).each(function(idx, xhr) {
        xhr.abort();
    });
    $.xhrPool.length = 0
};

// Ajax Error Handler
$.xhrError = function(e, xhr, o, r){
	if(o.retried++ < o.retry)  $.ajax(o);
	/*switch(xhr.status){ 
		case 401: // 401 Unauthorized
		case 407: // 407 Proxy Authentication Required
		// session probably expired, inform the user and redirect to login page in 5 secs
		
			// TODO: new MsgBox({title:'', body:'', buttons:[{value:action}]});
		break;
		case 408: // 408 Request Timeout
		case 500: // 500 Internal Server Error
		case 502: // 502 Bad Gateway
		case 503: // 503 Service Unavailable
		case 504: // 504 Gateway Timeout
		// try again 3 times before give up	
			if(o.retried++ < o.retry) { 
				$.ajax(o);
			}
		break;
		default: 
		// inform the user
			// 400 Bad Request
			// 402 Payment Required
			// 403 Forbidden
			// 404 Not Found
			// 405 Method Not Allowed
			// 406 Not Acceptable
			// 409 Conflict
			// 410 Gone
			// 411 Length Required
			// 412 Precondition Failed
			// 413 Request Entity Too Large
			// 414 Request-URI Too Long
			// 415 Unsupported Media Type
			// 416 Requested Range Not Satisfiable
			// 417 Expectation Failed
			// 501 Not Implemented
			// 505 HTTP Version Not Supported
			
			// TODO: new MsgBox({title:'', body:'', buttons:[{value:action}]});
	}*/
}

// Ajax call setup
$.ajaxSetup({
	dataType 	:"json",
	timeout 	: 30000,
	retried 	: 0,
	retry	 	: 0,
	contentType : "application/json",
	beforeSend 	: function(xhr) {
		xhr.setRequestHeader("application/json");
        $.xhrPool.push(xhr);
	},
    complete 	: function(xhr) {
		// remove from the $.xhrPool
        var index = $.xhrPool.indexOf(xhr);
        if (index > -1) {
            $.xhrPool.splice(index, 1);
        }
    }
});

// add error listener
$(document).ajaxError($.xhrError);

// variable used for debuging
var track;

var App = { models:{}, views:{}, collections:{}, utils:{} };

App.evpool = _.extend({}, Backbone.Events);

$.urlParam = function(name){
	var params = new RegExp('[\\?&]' + name + '=([^&#]*)').exec(window.location.href);
	return params == null ? '' : (params[1] || '');
}

App.utils.objectToUrlencode = function(obj){
	var r = '1';
	for( var i in obj ) r += '&'+i+'='+encodeURIComponent(obj[i]);
	return r;
}

App.utils.createObjectURL = function(i){ 
	var URL = window.URL || window.webkitURL || window.mozURL || window.msURL;
	return URL.createObjectURL(i);
}

App.utils.rotate = function($el, degree){
	degree = 'rotate('+degree+'deg)';
	$el
		/* Chrome &amp; Safari */
		.css('-webkit-transform', degree)
		/* Firefox */
		.css('-moz-transform', degree)
		/* IE 9+ */
		.css('-ms-transform', degree)
		/* Opera */
		.css('-o-transform', degree)
		/* CSS3 */
		.css('transform', degree);
		/* IE 7-8 */ // 45deg
		//filter: progid:DXImageTransform.Microsoft.Matrix(M11=0.70710678, M12=0.70710678, M21=-0.70710678, M22=0.70710678, sizingMethod='auto expand');
	return $el;
}

App.utils.resizeCrop = function( src, width, height ){ // {img, width, height}
	var crop = width == 0 || height == 0;
	// not resize
	if(src.width <= width && height == 0) {
		width  = src.width;
		height = src.height;
	}
	// resize
	if( src.width > width && height == 0){
		height = src.height * (width / src.width);
	}
	
	// check scale
	var xscale = width  / src.width;
	var yscale = height / src.height;
	var scale  = crop ? Math.min(xscale, yscale) : Math.max(xscale, yscale);
	// create empty canvas
	var canvas = document.createElement("canvas");					
	canvas.width  = width ? width   : Math.round(src.width  * scale);
	canvas.height = height ? height : Math.round(src.height * scale);
	canvas.getContext("2d").scale(scale,scale);
	// crop it top center
	canvas.getContext("2d").drawImage(src, ((src.width * scale) - canvas.width) * -.5 , ((src.height * scale) - canvas.height) * -.5 );
	return canvas;
}

App.utils.identifyBrowser = function(userAgent, elements) {
    var regexps = {
            'Chrome': [ /Chrome\/(\S+)/ ],
            'Firefox': [ /Firefox\/(\S+)/ ],
            'MSIE': [ /MSIE (\S+);/ ],
            'Opera': [
                /Opera\/.*?Version\/(\S+)/,     /* Opera 10 */
                /Opera\/(\S+)/                  /* Opera 9 and older */
            ],
            'Safari': [ /Version\/(\S+).*?Safari\// ]
        },
        re, m, browser, version;
 
    if (userAgent === undefined)
        userAgent = navigator.userAgent;
 
    if (elements === undefined)
        elements = 2;
    else if (elements === 0)
        elements = 1337;
 
    for (browser in regexps)
        while (re = regexps[browser].shift())
            if (m = userAgent.match(re)) {
                version = (m[1].match(new RegExp('[^.]+(?:\.[^.]+){0,' + --elements + '}')))[0];
                return {browser:browser,version:version};
            }
 
    return null;
};

App.utils.restrictBrowser = function(data){
  var ua = App.utils.identifyBrowser();
  return data[ua.browser] === false || data[ua.browser] > ua.version;
};



// Add Retry function for the backbone core
_.extend(Backbone.Model.prototype, {
	retry: 3,
	retried: 0,
    sync: function(method, model, options) {
        var $this = this, args = arguments;
        var errorHandler = options.error;
        options.error = function(xhr, xhrb) {// code for compatibility with old versions of backbone
            var errorHandlerArgs = arguments, tryagain = false;
			switch(xhr.status || xhrb.status){ 
				case 401: // 401 Unauthorized
				case 407: // 407 Proxy Authentication Required
				// session probably expired, inform the user and redirect to login page in 5 secs
				
					// TODO: new MsgBox({title:'', body:'', buttons:[{value:action}]});
				break;
				case 408: // 408 Request Timeout
				case 500: // 500 Internal Server Error
				case 502: // 502 Bad Gateway
				case 503: // 503 Service Unavailable
				case 504: // 504 Gateway Timeout
				// try again 3 times before give up	
					if($this.retried++ < $this.retry) tryagain = true;
				break;
				default: 
				// inform the user
					// 400 Bad Request
					// 402 Payment Required
					// 403 Forbidden
					// 404 Not Found
					// 405 Method Not Allowed
					// 406 Not Acceptable
					// 409 Conflict
					// 410 Gone
					// 411 Length Required
					// 412 Precondition Failed
					// 413 Request Entity Too Large
					// 414 Request-URI Too Long
					// 415 Unsupported Media Type
					// 416 Requested Range Not Satisfiable
					// 417 Expectation Failed
					// 501 Not Implemented
					// 505 HTTP Version Not Supported
					
					// TODO: new MsgBox({title:'', body:'', buttons:[{value:action}]});
			}
			// try again
            if (tryagain) {
                Backbone.sync.apply($this, args);
            } else {
			// give up
                $this.retried = 0;
				if(errorHandler) errorHandler.apply($this, errorHandlerArgs);
				else alert('Error');
            }
        };
		// the first call
        Backbone.sync.apply(this, args);
    }
});